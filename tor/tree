#!/bin/bash

# tree creates multiply tor configurations (channels)

# Prerequisite:
# ftp://ftp.delegate.org/pub/DeleGate/

# Based on:
# http://blog.databigbang.com/running-your-own-anonymous-rotating-proxies/
# https://gist.github.com/2519840

# Configuration
# TODO: read config
# base address
_socks=33001
# channel prefix
_pre="CH"
# listen host
_host="localhost"
_proxy="192.168.33.33"

function tree/control() {
  echo $((${1:-${_socks}}+1))
}

function tree/dns() {
  echo $((${1:-${_socks}}+2))
}

function tree/http() {
  echo $((${1:-${_socks}}+3))
}

function tree/init() {
  local i=${1:-1}
  i=$(printf "%02d\n" ${i})
  local _dir="./${_pre}${i}"

  if test -d "${_dir}"; then return; fi

  mkdir "${_dir}"
  local _path=$(cd ${_dir};pwd)
  tree/torrc    "${_path}"
  tree/torsocks "${_path}"
  tree/torsocks "${_path}" "192.168.33.33" ".ext"
  tree/config   "${_path}"
  tree/privoxy  "${_path}"
  tree/polipo   "${_path}"
  chmod -R go-rwx "${_dir}"
}

function tree/torrc() {
  local _rc="${1}/torrc"
  # no password: since it is exclusive
  cp header "${_rc}"
  cat > "${_rc}" << EOF
SocksPort 127.0.0.1:${_socks}
SocksPort 192.168.33.33:${_socks}
ControlPort ${_control}
DNSPort ${_dns}
DataDirectory ${_path}
PidFile ${_path}/tor.pid
# DisableAllSwap 1
# RunAsDaemon 1
EOF
}

function tree/privoxy() {
  local _rc="${1}/privoxy"
  # no password: since it is exclusive
  cat > "${_rc}" << EOF
forward-socks4a / 127.0.0.1:${_socks} .
listen-address 127.0.0.1:${_http}
listen-address 192.168.33.33:${_http}
confdir /etc/privoxy
EOF
}

function tree/polipo() {
  local _rc="${1}/polipo"
  cat > "${_rc}" << EOF
socksParentProxy = 127.0.0.1:${_socks}
diskCacheRoot=""
disableLocalInterface=true
socksProxyType = socks5
# censoredHeaders = from, accept-language, x-pad
# censorReferer = maybe
pidFile = "${1}/polipo.pid"
proxyAddress = 127.0.0.1
proxyPort = ${_http}
# proxyAddress = 192.168.33.33
#Â proxyPort = ${_http}
EOF
}

function tree/torsocks() {
  local _rc="${1}/torsocks${3}"
  local _ip=${2:-127.0.0.1}
  cat > "${_rc}" << EOF
server = ${_ip}
server_port = ${_socks}
server_type = 5
tordns_enable = true
EOF
}

function tree/config() {
  local _rc="${1}/config"
  cat > "${_rc}" << EOF
mid_tor_listen=${_socks}
mid_tor_control=${_control}
mid_tor_dns=${_dns}
mid_tor_http=${_http}
mid_tor_host=${_host}
EOF
}



function tree/haproxy() {
  local _rc="haproxy"
  cat > "${_rc}" << EOF
global
# daemon
 maxconn 256

defaults
 mode http
 timeout connect 500000ms
 timeout client  500000ms
 timeout server  500000ms
 option dontlognull
 retries 3
 option redispatch

frontend rotor
 bind ${_proxy}:33128
 default_backend tors
 option http_proxy

listen stats 192.168.33.33:38080
 mode http
 balance
 stats uri /haproxy
 stats realm HAProxy\ Statistics
 stats auth admin:haproxy

backend tors
 option http_proxy
EOF

  local i
  for i in ${_pre}* ; do
    if ! test -d ${i} ; then continue; fi
    i=$(basename ${i})
    source ${i}/config
    echo " server ${i} ${mid_tor_host}:${mid_tor_http}" >> "${_rc}"
  done
  echo " balance roundrobin" >> "${_rc}"

  haproxy -db -V -d -p haproxy.pid -f "${_rc}"
}

function tree/pkill() {
  local _pid="${1}/tor.pid"
  if test -r "${_pid}" ; then kill $(cat "${_pid}"); fi
}

function tree/skill() {
  local _ch="${1}"
  local _pid=$(screen -ls | \
               grep $(basename ${_ch}) | \
               awk '{split($1,a,"."); print a[1]}')
  if ! test -z ${_pid}; then kill ${_pid}; fi
}

### arg
_cmd=${1:-init}

_control=$(tree/control)
_dns=$(tree/dns)
_http=$(tree/http)

function help/tree() {
  cat << EOF
  tree init N  - creates N channels
  tree clean   - cleans all channels
  tree start   - start channels in detached screens
  tree stop    - stop channels
  tree haproxy - starts haproxy rotor
EOF
  exit 1
}


### main
case ${_cmd} in
  help)
    help/tree
  ;;
  clean)
    shift
    for i in ${_pre}* ; do
      if ! test -d ${i} ; then continue; fi

      rm -Rv ./${i}
    done
  ;;
  list)
    shift
    for i in ${_pre}* ; do
      if ! test -d ${i} ; then continue; fi
      cat ${i}/config
      echo ""
    done
  ;;
  init)
    shift
    _l=${1:-3}
    for ((i=1;i<=${_l};++i)); do
      tree/init ${i}
      _socks=$((_socks+4))
      _control=$(tree/control)
      _dns=$(tree/dns)
      _http=$(tree/http)
    done
    echo "${_l} channel(s) created. Plant the tree by ./tree start!"
  ;;
  start)
    shift
    for i in ${_pre}* ; do
      if ! test -d ${i} ; then continue; fi

      echo "Starting channel ${i}..."
      # tor in bg, delegated fg
      _opt="-d"
      # _opt=""
      screen -t ${i} -S ${i} ${_opt} -m ./torgate ${i}
    done
    echo "Pry the delegated channel by ./pry chan"
    echo "Arm the delegated channel by ./arm chan"
    echo ""
    echo "Start haproxy rotor by ./tree haproxy"
  ;;
  stop)
    shift
    for i in ${_pre}* ; do
      if ! test -d ${i} ; then continue; fi

      echo "Stopping channel ${i}..."
      tree/pkill ${i}
      if test -r ${i}/torgate.pid; then
        kill $(cat ${i}/torgate.pid)
      fi
      # tree/skill ${i}
    done
  ;;
  haproxy)
    shift
    echo "Starting haproxy rotor..."
    tree/haproxy $*
  ;;
esac
